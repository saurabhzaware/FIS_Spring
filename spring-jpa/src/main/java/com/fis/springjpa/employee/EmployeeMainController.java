package com.fis.springjpa.employee;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import net.bytebuddy.dynamic.DynamicType.Builder.FieldDefinition.Optional;

@RestController // This means that this class is a Controller
@RequestMapping // This means URL's start with /demo (after Application path)
public class EmployeeMainController {
  @Autowired // This means to get the bean called employeeRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private EmployeeRepository employeeRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewEmployee (@RequestParam int id
      , @RequestParam String name) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Employee n = new Employee();
    n.setId(id);
    n.setName(name);
    employeeRepository.save(n);
    return "Saved employee details";
  }
  
  @GetMapping
	public Iterable<Employee> getAllEmployee() {
		return employeeRepository.findAll();
	}
//  
//  @PostMapping
//	public String addEmployee(@RequestBody Employee employee) {
//	  employeeRepository.save(employee);
//		return "Saved";
//	}
//  
  @GetMapping
	public Object getAEmployee(@PathVariable int id) {
		Object p = employeeRepository.findById(id);
		if (((java.util.Optional<Employee>) p).isPresent()) {
			return ((java.util.Optional<Employee>) p).get();
		} else {
			return "Product Not Found!!";
		}
	}
//  
//  @DeleteMapping
//	public String deleteEmployee(@RequestParam int id) {
//		java.util.Optional<Employee> p = employeeRepository.findById(id);
//		if (p.isPresent()) {
//			employeeRepository.delete(p.get());
//			return "Deleted";
//		} else {
//			return "Product Not Found!!";
//		}
//	}
}